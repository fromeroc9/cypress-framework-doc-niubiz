import{_ as e,r as o,o as c,c as i,a as n,b as t,d as p,e as s}from"./app.7262a81b.js";const l={},u=p('<h1 id="actions" tabindex="-1"><a class="header-anchor" href="#actions" aria-hidden="true">#</a> Actions</h1><p>Forma simplificada de cypress para realizar acciones como type, clear, click, select, value, wait, read, write, frame.</p><p><strong>Ubicaci\xF3n:</strong> <code>cypress/e2e/actions/Actions.ts</code></p><table><thead><tr><th>Opci\xF3n</th><th>Default</th><th>Descripci\xF3n</th></tr></thead><tbody><tr><td>typeText</td><td>locator: string, value: string, xpath: boolean</td><td>Permite ingresar texto exclusivo a input</td></tr><tr><td>click</td><td>locator: string, xpath: boolean</td><td>Permite realizar click con cualquier elemento que se encuentre en el DOM</td></tr><tr><td>clear</td><td>locator: string, xpath: boolean</td><td>Permite eliminar el texto a inputs</td></tr><tr><td>selectByVisibleText</td><td>locator: string, value: string, xpath: boolean</td><td>Permite captura el valor <code>option value</code> o <code>option text</code></td></tr><tr><td>wait</td><td>time : number</td><td>Permite realizar una pausa en la ejecuci\xF3n de la prueba <code>1000 = 1 seg</code></td></tr><tr><td>getValue</td><td>locator: string, xpath: boolean</td><td>Permite obtener el valor del input <code>experimental</code></td></tr><tr><td>getText</td><td>locator: string, xpath: boolean</td><td>Permite obtener el valor texto de cualquier elemento en el DOM <code>experimental</code></td></tr><tr><td>xframe</td><td>locator: string, position: number</td><td>Permite buscar el frame orden en el DOM valor por defecto 0</td></tr><tr><td>itypeText</td><td>framelocator : string, locator: string, value: string, xpath: boolean</td><td>Permite ingresar texto exclusivo a input del frame</td></tr><tr><td>iclick</td><td>framelocator : string, locator: string, xpath: boolean</td><td>Permite realizar click con cualquier elemento que se encuentre en el frame</td></tr><tr><td>iclear</td><td>framelocator : string, locator: string, xpath: boolean</td><td>Permite eliminar el texto a inputs del frame</td></tr><tr><td>iselectByVisibleText</td><td>framelocator : string, locator: string, xpath: boolean</td><td>Permite captura el valor <code>option value</code> o <code>option text</code> exclusivo para frame</td></tr><tr><td>ExcelReader</td><td>file; string, sheet: string, jsonName?:string</td><td>Permite leer archivos excel con formato xlsx</td></tr><tr><td>JSONReader</td><td>file: string</td><td>Permite leer archivos json</td></tr><tr><td>JSONWrite</td><td>filename: string, data: any</td><td>Permite crear archivo json</td></tr></tbody></table>',4),r=s("Todos los commads de cypress tienen una opciones que permiten cambiar el comportamiento predeterminado. Si desea crear una acci\xF3n nueva por favor revise en : "),k={href:"https://docs.cypress.io/api/table-of-contents",target:"_blank",rel:"noopener noreferrer"},d=s("API Commands"),m=p(`<p><em><strong>Ejemplo</strong></em> : Estructura de un Actions</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//void no retorna nada</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">NAME_OPTION</span> <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">:</span> type<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

<span class="token comment">//string retorna valor texto</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">NAME_OPTION</span> <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">:</span> type<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">//number retorna valor numerico</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">NAME_OPTION</span> <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">:</span> type<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token comment">//puede crear su tipo de dato a retornar con interfaces</span>
<span class="token comment">//Otros tipo de retornos Interface, Object, Promise, Array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typetext" tabindex="-1"><a class="header-anchor" href="#typetext" aria-hidden="true">#</a> typeText</h2><p>Permite ingresar texto exclusivo a input</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">typeText</span> <span class="token operator">=</span> <span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">!</span>xpath<span class="token punctuation">)</span> <span class="token operator">?</span> cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> cy<span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//Si es solo id, css selector, element html</span>
<span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">&quot;#input-password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">)</span>
<span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">&quot;.input-password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">)</span>
<span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">&quot;input[type=&#39;password&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Si es xpath</span>
<span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">&quot;//input[type=&#39;text&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),v=s("Construido con "),b={href:"https://docs.cypress.io/api/commands/type",target:"_blank",rel:"noopener noreferrer"},g=s(".type(text), .type(text, options)"),f=p(`<h2 id="click" tabindex="-1"><a class="header-anchor" href="#click" aria-hidden="true">#</a> click</h2><p>Permite realizar click con cualquier elemento que se encuentre en el DOM</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> click <span class="token operator">=</span> <span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">!</span>xpath<span class="token punctuation">)</span> <span class="token operator">?</span> cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> cy<span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//Si es solo id, css selector, element html</span>
<span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&quot;#grabar&quot;</span><span class="token punctuation">)</span>
<span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&quot;.btn-submit&quot;</span><span class="token punctuation">)</span>
<span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&quot;input[type=&#39;submit&#39;]&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Si es xpath</span>
<span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&quot;//[@id=&#39;Enviar&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&quot;//button[text()=&#39;Validate&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),h=s("Construido con "),x={href:"https://docs.cypress.io/api/commands/click",target:"_blank",rel:"noopener noreferrer"},y=s(".click(position), .click(position, options)"),q=p(`<h2 id="clear" tabindex="-1"><a class="header-anchor" href="#clear" aria-hidden="true">#</a> clear</h2><p>Permite eliminar el texto a inputs</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> clear <span class="token operator">=</span> <span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">!</span>xpath<span class="token punctuation">)</span> <span class="token operator">?</span> cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> cy<span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//Si es solo id, css selector, element html</span>
<span class="token function">clear</span><span class="token punctuation">(</span><span class="token string">&quot;#input-password&quot;</span><span class="token punctuation">)</span>
<span class="token function">clear</span><span class="token punctuation">(</span><span class="token string">&quot;.input-password&quot;</span><span class="token punctuation">)</span>
<span class="token function">clear</span><span class="token punctuation">(</span><span class="token string">&quot;input[type=&#39;password&#39;]&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Si es xpath</span>
<span class="token function">clear</span><span class="token punctuation">(</span><span class="token string">&quot;//input[type=&#39;text&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),_=s("Construido con "),w={href:"https://docs.cypress.io/api/commands/clear",target:"_blank",rel:"noopener noreferrer"},S=s(".clear(), .clear(options)"),T=p(`<h2 id="selectbyvisibletext" tabindex="-1"><a class="header-anchor" href="#selectbyvisibletext" aria-hidden="true">#</a> selectByVisibleText</h2><p>Permite captura el valor <code>option value</code> o <code>option text</code></p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> selectByVisibleText <span class="token operator">=</span> <span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">!</span>xpath<span class="token punctuation">)</span> <span class="token operator">?</span> cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> cy<span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//Si es solo id, css selector, element html</span>
<span class="token function">selectByVisibleText</span><span class="token punctuation">(</span><span class="token string">&quot;#select-paises&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Argentina&quot;</span><span class="token punctuation">)</span>
<span class="token function">selectByVisibleText</span><span class="token punctuation">(</span><span class="token string">&quot;.select2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token function">selectByVisibleText</span><span class="token punctuation">(</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;argentina&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//*[@id=&quot;channel&quot;]</span>
<span class="token comment">//Si es xpath</span>
<span class="token function">selectByVisibleText</span><span class="token punctuation">(</span><span class="token string">&quot;//select[@id=&#39;channel&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),P=s("Construido con "),N={href:"https://docs.cypress.io/api/commands/select",target:"_blank",rel:"noopener noreferrer"},O=s(".select(values), .select(values,options)"),V=p(`<h2 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> wait</h2><p>Permite realizar una pausa en la ejecuci\xF3n de la prueba <code>1000 = 1seg</code></p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> wait <span class="token operator">=</span> <span class="token punctuation">(</span>time<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),D=s("Construido con "),E={href:"https://docs.cypress.io/api/commands/wait",target:"_blank",rel:"noopener noreferrer"},j=s(".wait(time), .wait(alias)"),A=p(`<h2 id="getvalue" tabindex="-1"><a class="header-anchor" href="#getvalue" aria-hidden="true">#</a> getValue</h2><p>Permite obtener el valor del input</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> action <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span>xpath<span class="token punctuation">)</span> <span class="token operator">?</span> cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span> <span class="token operator">:</span> cy<span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> action<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;val&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//obtener valor de usuario y contrase\xF1a</span>
<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;#username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment">//Output: joe@example.com</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&quot;//input[@id=&#39;username&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment">//Output: joe@example.com</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//Si debea guardar el valor en variable global se recomienda usar Model o Interface</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),C=s("Construido con "),B={href:"https://docs.cypress.io/api/commands/invoke",target:"_blank",rel:"noopener noreferrer"},U=s(".invoke(functionName)"),M=p(`<h2 id="gettext" tabindex="-1"><a class="header-anchor" href="#gettext" aria-hidden="true">#</a> getText</h2><p>Permite obtener el valor texto de cualquier elemento en el DOM</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> getText <span class="token operator">=</span> <span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> action <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span>xpath<span class="token punctuation">)</span> <span class="token operator">?</span> cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span> <span class="token operator">:</span> cy<span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> action<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//obtener valor de usuario logeado</span>
<span class="token function">getText</span><span class="token punctuation">(</span><span class="token string">&#39;.account &gt; span &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment">//Output: Joe Doe</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">getText</span><span class="token punctuation">(</span><span class="token string">&quot;//a[@class=&#39;account&#39;]//span&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment">//Output: Joe Doe</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//Si debea guardar el valor en variable global se recomienda usar Model o Interface</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),J=s("Construido con "),R={href:"https://docs.cypress.io/api/commands/then",target:"_blank",rel:"noopener noreferrer"},I=s(".then(callbackFn))"),z=p(`<h2 id="xframe" tabindex="-1"><a class="header-anchor" href="#xframe" aria-hidden="true">#</a> xframe</h2><p>Permite buscar el frame orden en el DOM valor por defecto 0</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">xframe</span> <span class="token operator">=</span> <span class="token punctuation">(</span>locator <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> cy<span class="token punctuation">.</span><span class="token function">xframe</span><span class="token punctuation">(</span>locator<span class="token punctuation">,</span> xpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),F=s("Construido con "),L={href:"https://docs.cypress.io/api/commands/its",target:"_blank",rel:"noopener noreferrer"},W=s(".its(time), .its(propertyName)"),G=p(`<h2 id="itypetext" tabindex="-1"><a class="header-anchor" href="#itypetext" aria-hidden="true">#</a> itypeText</h2><p>Permite ingresar texto exclusivo a input</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">itypeText</span> <span class="token operator">=</span> <span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">!</span>xpath<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">xframe</span><span class="token punctuation">(</span>framelocator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">xframe</span><span class="token punctuation">(</span>framelocator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//Si es solo id, css selector, element html</span>
<span class="token function">itypeText</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#input-password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">)</span>
<span class="token function">itypeText</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.input-password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">)</span>
<span class="token function">itypeText</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;input[type=&#39;password&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Si es xpath</span>
<span class="token function">itypeText</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;//input[type=&#39;text&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">// Si el locator del frame es xpath invocar el comando</span>
cy<span class="token punctuation">.</span><span class="token function">xframe</span><span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">xframe</span><span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),H=s("Construido con "),K={href:"https://docs.cypress.io/api/commands/type",target:"_blank",rel:"noopener noreferrer"},Q=s(".type(text), .type(text, options)"),X=p(`<h2 id="iclick" tabindex="-1"><a class="header-anchor" href="#iclick" aria-hidden="true">#</a> iclick</h2><p>Permite realizar click con cualquier elemento que se encuentre en el frame</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">iclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span>framelocator <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">!</span>xpath<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">xframe</span><span class="token punctuation">(</span>framelocator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">xframe</span><span class="token punctuation">(</span>framelocator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//Si es solo id, css selector, element html</span>
<span class="token function">iclick</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#grabar&quot;</span><span class="token punctuation">)</span>
<span class="token function">iclick</span><span class="token punctuation">(</span><span class="token string">&quot;.frame-control&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.btn-submit&quot;</span><span class="token punctuation">)</span>
<span class="token function">iclick</span><span class="token punctuation">(</span><span class="token string">&quot;iframe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;input[type=&#39;submit&#39;]&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Si es xpath</span>
<span class="token function">iclick</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;//[@id=&#39;Enviar&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token function">iclick</span><span class="token punctuation">(</span><span class="token string">&quot;#frame&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;//button[text()=&#39;Validate&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">// Si el locator del frame es xpath invocar el comando</span>
cy<span class="token punctuation">.</span><span class="token function">xframe</span><span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">xframe</span><span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Y=s("Construido con "),Z={href:"https://docs.cypress.io/api/commands/click",target:"_blank",rel:"noopener noreferrer"},$=s(".click(position), .click(position, options)"),nn=p(`<h2 id="iclear" tabindex="-1"><a class="header-anchor" href="#iclear" aria-hidden="true">#</a> iclear</h2><p>Permite eliminar el texto a inputs</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> iclear <span class="token operator">=</span> <span class="token punctuation">(</span>framelocator <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">!</span>xpath<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">xframe</span><span class="token punctuation">(</span>framelocator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">xframe</span><span class="token punctuation">(</span>framelocator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//Si es solo id, css selector, element html</span>
<span class="token function">iclear</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#input-password&quot;</span><span class="token punctuation">)</span>
<span class="token function">iclear</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.input-password&quot;</span><span class="token punctuation">)</span>
<span class="token function">iclear</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;input[type=&#39;password&#39;]&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Si es xpath</span>
<span class="token function">iclear</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;//input[type=&#39;text&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">// Si el locator del frame es xpath invocar el comando</span>
cy<span class="token punctuation">.</span><span class="token function">xframe</span><span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">xframe</span><span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),sn=s("Construido con "),an={href:"https://docs.cypress.io/api/commands/clear",target:"_blank",rel:"noopener noreferrer"},tn=s(".clear(), .clear(options)"),pn=p(`<h2 id="iselectbyvisibletext" tabindex="-1"><a class="header-anchor" href="#iselectbyvisibletext" aria-hidden="true">#</a> iselectByVisibleText</h2><p>Permite captura el valor <code>option value</code> o <code>option text</code></p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> iselectByVisibleText <span class="token operator">=</span> <span class="token punctuation">(</span>framelocator <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xpath<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">!</span>xpath<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">xframe</span><span class="token punctuation">(</span>framelocator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">xframe</span><span class="token punctuation">(</span>framelocator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//Si es solo id, css selector, element html</span>
<span class="token function">iselectByVisibleText</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#select-paises&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Argentina&quot;</span><span class="token punctuation">)</span>
<span class="token function">iselectByVisibleText</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.select2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token function">iselectByVisibleText</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;select&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;argentina&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Si es xpath</span>
<span class="token function">iselectByVisibleText</span><span class="token punctuation">(</span><span class="token string">&quot;#iframe1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;//select[@id=&#39;channel&#39;]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">// Si el locator del frame es xpath invocar el comando</span>
cy<span class="token punctuation">.</span><span class="token function">xframe</span><span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locator<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">xframe</span><span class="token punctuation">(</span>locator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span>locator<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),en=s("Construido con "),on={href:"https://docs.cypress.io/api/commands/select",target:"_blank",rel:"noopener noreferrer"},cn=s(".select(values), .select(values,options)"),ln=p(`<h2 id="excelreader" tabindex="-1"><a class="header-anchor" href="#excelreader" aria-hidden="true">#</a> ExcelReader</h2><p>Permite leer archivos excel con formato xlsx</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> ExcelReader <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> sheet<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> jsonName<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> data <span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    cy<span class="token punctuation">.</span><span class="token function">ExcelReader</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> sheet<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rows <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        rows<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>element <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jsonName <span class="token operator">!=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">JSONWrite</span><span class="token punctuation">(</span>jsonName<span class="token punctuation">,</span> rows<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// los archivos deben estar en la carpeta fixture</span>
<span class="token keyword">let</span> getData <span class="token operator">=</span> <span class="token function">ExcelReader</span><span class="token punctuation">(</span><span class="token string">&#39;data.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Empleados&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getData<span class="token punctuation">)</span>
<span class="token comment">//Output</span>
<span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">{</span> Nombre <span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> Apellido<span class="token operator">:</span> <span class="token string">&#39;Doe&#39;</span><span class="token punctuation">}</span>
<span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">{</span> Nombre <span class="token operator">:</span> <span class="token string">&#39;Carlos&#39;</span><span class="token punctuation">,</span> Apellido<span class="token operator">:</span> <span class="token string">&#39;Medina&#39;</span><span class="token punctuation">}</span>

<span class="token comment">// Acceder a una propiedad de la data</span>
<span class="token keyword">let</span> _nombre <span class="token operator">=</span> getData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Nombre<span class="token punctuation">;</span>
<span class="token keyword">let</span> _nombre <span class="token operator">=</span> getData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;Nombre&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Output</span>
Carlos

<span class="token comment">// si deseamos que crea un json mandar de la data del excel</span>
<span class="token keyword">let</span> getData <span class="token operator">=</span> <span class="token function">ExcelReader</span><span class="token punctuation">(</span><span class="token string">&#39;data.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Empleados&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;empleado-data&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// revisar carpeta fixture </span>
<span class="token comment">//Output: </span>
fixture<span class="token operator">/</span>empleado<span class="token operator">-</span>data<span class="token punctuation">.</span>json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsonreader" tabindex="-1"><a class="header-anchor" href="#jsonreader" aria-hidden="true">#</a> JSONReader</h2><p>Permite leer archivos json</p><p><strong>Sintaxis</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> JSONReader <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> data <span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    cy<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>element <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Uso</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// los archivos deben estar en la carpeta fixture *.json</span>
<span class="token keyword">let</span> getData <span class="token operator">=</span> <span class="token function">JSONReader</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getData<span class="token punctuation">)</span>
<span class="token comment">//Output</span>
<span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">{</span> Nombre <span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> Apellido<span class="token operator">:</span> <span class="token string">&#39;Doe&#39;</span><span class="token punctuation">}</span>
<span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">{</span> Nombre <span class="token operator">:</span> <span class="token string">&#39;Carlos&#39;</span><span class="token punctuation">,</span> Apellido<span class="token operator">:</span> <span class="token string">&#39;Medina&#39;</span><span class="token punctuation">}</span>

<span class="token comment">// Acceder a una propiedad de la data</span>
<span class="token keyword">let</span> _nombre <span class="token operator">=</span> getData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Nombre<span class="token punctuation">;</span>
<span class="token keyword">let</span> _nombre <span class="token operator">=</span> getData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;Nombre&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Output</span>
John
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),un=s("Construido con "),rn={href:"https://docs.cypress.io/api/commands/fixture",target:"_blank",rel:"noopener noreferrer"},kn=s(".fixture(filepath), .fixture(filepath, options)");function dn(mn,vn){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[r,n("a",k,[d,t(a)])]),m,n("p",null,[v,n("a",b,[g,t(a)])]),f,n("p",null,[h,n("a",x,[y,t(a)])]),q,n("p",null,[_,n("a",w,[S,t(a)])]),T,n("p",null,[P,n("a",N,[O,t(a)])]),V,n("p",null,[D,n("a",E,[j,t(a)])]),A,n("p",null,[C,n("a",B,[U,t(a)])]),M,n("p",null,[J,n("a",R,[I,t(a)])]),z,n("p",null,[F,n("a",L,[W,t(a)])]),G,n("p",null,[H,n("a",K,[Q,t(a)])]),X,n("p",null,[Y,n("a",Z,[$,t(a)])]),nn,n("p",null,[sn,n("a",an,[tn,t(a)])]),pn,n("p",null,[en,n("a",on,[cn,t(a)])]),ln,n("p",null,[un,n("a",rn,[kn,t(a)])])])}var gn=e(l,[["render",dn],["__file","actions.html.vue"]]);export{gn as default};
